{
  "hash": "85a3679b0d961276476b1c6bb331b270",
  "result": {
    "markdown": "---\ntitle: \"Homework 2\"\nauthor: \"Tanmay Agrawal\"\ndesription: \"Reading in Data\"\ndate: \"01/06/2023\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - hw2\n  - hotel_bookings.csv\n---\n\n\nWe first load the neccessary libraries\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.0      ✔ purrr   1.0.0 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.5.0 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n```\n:::\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(dplyr)\nknitr::opts_chunk$set(echo = TRUE)\n```\n:::\n\n\nNow we load the data. I sorted the datasets by size and picked the largest one which is \"hotel_bookings.csv\". I will use the `read_csv()` function as it's the recommend way to load files.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata = read_csv(\"_data/hotel_bookings.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 119390 Columns: 32\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (13): hotel, arrival_date_month, meal, country, market_segment, distrib...\ndbl  (18): is_canceled, lead_time, arrival_date_year, arrival_date_week_numb...\ndate  (1): reservation_status_date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\n# We spec the columns in this dataset using the spec command\nspec(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ncols(\n  hotel = col_character(),\n  is_canceled = col_double(),\n  lead_time = col_double(),\n  arrival_date_year = col_double(),\n  arrival_date_month = col_character(),\n  arrival_date_week_number = col_double(),\n  arrival_date_day_of_month = col_double(),\n  stays_in_weekend_nights = col_double(),\n  stays_in_week_nights = col_double(),\n  adults = col_double(),\n  children = col_double(),\n  babies = col_double(),\n  meal = col_character(),\n  country = col_character(),\n  market_segment = col_character(),\n  distribution_channel = col_character(),\n  is_repeated_guest = col_double(),\n  previous_cancellations = col_double(),\n  previous_bookings_not_canceled = col_double(),\n  reserved_room_type = col_character(),\n  assigned_room_type = col_character(),\n  booking_changes = col_double(),\n  deposit_type = col_character(),\n  agent = col_character(),\n  company = col_character(),\n  days_in_waiting_list = col_double(),\n  customer_type = col_character(),\n  adr = col_double(),\n  required_car_parking_spaces = col_double(),\n  total_of_special_requests = col_double(),\n  reservation_status = col_character(),\n  reservation_status_date = col_date(format = \"\")\n)\n```\n:::\n:::\n\n\nUsing the `spec` command we get the descriptions of the data types of each column.\n  \nHere all the column names are followed by their data type.\nWe see `col_double` which is a double precision number typically used for continuous values but can be used for rankings or categories described using numbers like the years in a date range or month in a year. There is also a `col_character` type which is a character data type used for non-numerical values (generally categorical) or `col_date` which is a reserved data type for dates.\n\nWe look at the first few rows of the data to get a visual outline of the dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 32\n  hotel   is_ca…¹ lead_…² arriv…³ arriv…⁴ arriv…⁵ arriv…⁶ stays…⁷ stays…⁸ adults\n  <chr>     <dbl>   <dbl>   <dbl> <chr>     <dbl>   <dbl>   <dbl>   <dbl>  <dbl>\n1 Resort…       0     342    2015 July         27       1       0       0      2\n2 Resort…       0     737    2015 July         27       1       0       0      2\n3 Resort…       0       7    2015 July         27       1       0       1      1\n4 Resort…       0      13    2015 July         27       1       0       1      1\n5 Resort…       0      14    2015 July         27       1       0       2      2\n6 Resort…       0      14    2015 July         27       1       0       2      2\n# … with 22 more variables: children <dbl>, babies <dbl>, meal <chr>,\n#   country <chr>, market_segment <chr>, distribution_channel <chr>,\n#   is_repeated_guest <dbl>, previous_cancellations <dbl>,\n#   previous_bookings_not_canceled <dbl>, reserved_room_type <chr>,\n#   assigned_room_type <chr>, booking_changes <dbl>, deposit_type <chr>,\n#   agent <chr>, company <chr>, days_in_waiting_list <dbl>,\n#   customer_type <chr>, adr <dbl>, required_car_parking_spaces <dbl>, …\n```\n:::\n:::\n\n\n## Cleaning the data\n\nWe observe that some columns like `agent` and `company` have \"NULL\" values, the challenge here is that these values are still character data types and have to be detected using different methods. We can simply look at each column and calculate the percentage of \"NULL\" values it has and get rid of the ones with more that 10% of these values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# we use the stringr package for this\nlibrary(stringr)\n\n# get the null percentages\nnull_percentages <- sapply(data, function(x) sum(str_detect(x, \"NULL\"))/length(x))\n\n# put it into a dataframe so that it's visually appealing\n\nnull_percentages_df <- data.frame(column = names(data), null_percentage = null_percentages)\n\nnull_percentages_df %>%\n  arrange(desc(null_percentage))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                                                       column null_percentage\ncompany                                               company     0.943068934\nagent                                                   agent     0.136862384\ncountry                                               country     0.004087445\nhotel                                                   hotel     0.000000000\nis_canceled                                       is_canceled     0.000000000\nlead_time                                           lead_time     0.000000000\narrival_date_year                           arrival_date_year     0.000000000\narrival_date_month                         arrival_date_month     0.000000000\narrival_date_week_number             arrival_date_week_number     0.000000000\narrival_date_day_of_month           arrival_date_day_of_month     0.000000000\nstays_in_weekend_nights               stays_in_weekend_nights     0.000000000\nstays_in_week_nights                     stays_in_week_nights     0.000000000\nadults                                                 adults     0.000000000\nbabies                                                 babies     0.000000000\nmeal                                                     meal     0.000000000\nmarket_segment                                 market_segment     0.000000000\ndistribution_channel                     distribution_channel     0.000000000\nis_repeated_guest                           is_repeated_guest     0.000000000\nprevious_cancellations                 previous_cancellations     0.000000000\nprevious_bookings_not_canceled previous_bookings_not_canceled     0.000000000\nreserved_room_type                         reserved_room_type     0.000000000\nassigned_room_type                         assigned_room_type     0.000000000\nbooking_changes                               booking_changes     0.000000000\ndeposit_type                                     deposit_type     0.000000000\ndays_in_waiting_list                     days_in_waiting_list     0.000000000\ncustomer_type                                   customer_type     0.000000000\nadr                                                       adr     0.000000000\nrequired_car_parking_spaces       required_car_parking_spaces     0.000000000\ntotal_of_special_requests           total_of_special_requests     0.000000000\nreservation_status                         reservation_status     0.000000000\nreservation_status_date               reservation_status_date     0.000000000\nchildren                                             children              NA\n```\n:::\n:::\n\n\nWe can get rid of the columns `company` and `agent` since they have a high percentage of \"NULL\" values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntidy_data = select(data, -company, -agent)\nhead(tidy_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 30\n  hotel   is_ca…¹ lead_…² arriv…³ arriv…⁴ arriv…⁵ arriv…⁶ stays…⁷ stays…⁸ adults\n  <chr>     <dbl>   <dbl>   <dbl> <chr>     <dbl>   <dbl>   <dbl>   <dbl>  <dbl>\n1 Resort…       0     342    2015 July         27       1       0       0      2\n2 Resort…       0     737    2015 July         27       1       0       0      2\n3 Resort…       0       7    2015 July         27       1       0       1      1\n4 Resort…       0      13    2015 July         27       1       0       1      1\n5 Resort…       0      14    2015 July         27       1       0       2      2\n6 Resort…       0      14    2015 July         27       1       0       2      2\n# … with 20 more variables: children <dbl>, babies <dbl>, meal <chr>,\n#   country <chr>, market_segment <chr>, distribution_channel <chr>,\n#   is_repeated_guest <dbl>, previous_cancellations <dbl>,\n#   previous_bookings_not_canceled <dbl>, reserved_room_type <chr>,\n#   assigned_room_type <chr>, booking_changes <dbl>, deposit_type <chr>,\n#   days_in_waiting_list <dbl>, customer_type <chr>, adr <dbl>,\n#   required_car_parking_spaces <dbl>, total_of_special_requests <dbl>, …\n```\n:::\n:::\n\n\nOur data is cleaner now.\n\n## Potential research questions\n\nWe can see that it describes hotel bookings across different countries and records some interesting columns like `lead_time`, `market_segment`, `distribution_channel`, `is_repeated_guest`, `previous_cancellations`, `booking_changes` which could be used as predictive signals to determine the potential value of a customer. For instance, if a customer is making too many changes, have a history of cancelling, and from a particular distribution channel that might lead us to think that they are likely to make a last minute cancellation. This could be used to make predictions about availability and dynamic pricing of rooms -- akin to what the airline industry does.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}