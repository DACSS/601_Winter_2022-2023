{
  "hash": "ef862e21ef51c1ac8882266fec843e72",
  "result": {
    "markdown": "---\ntitle: \"Challenge 8\"\nauthor: \"Siddharth Goel\"\ndescription: \"Joining Data\"\ndate: \"01/31/2023\"\nformat:\n  html:\n    toc: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_8\n  - faostat\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(dplyr)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Challenge Overview\n\nToday's challenge is to:\n\n1)  read in multiple data sets, and describe the data set using both words and any supporting information (e.g., tables, etc)\n2)  tidy data (as needed, including sanity checks)\n3)  mutate variables as needed (including sanity checks)\n4)  join two or more data sets and analyze some aspect of the joined data\n\n(be sure to only include the category tags for the data you use!)\n\n## Read in data\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngroup_df <- read_csv(\"_data/FAOSTAT_country_groups.csv\")\nspec(group_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ncols(\n  `Country Group Code` = col_double(),\n  `Country Group` = col_character(),\n  `Country Code` = col_double(),\n  Country = col_character(),\n  `M49 Code` = col_character(),\n  `ISO2 Code` = col_character(),\n  `ISO3 Code` = col_character()\n)\n```\n:::\n\n```{.r .cell-code}\nhead(group_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 7\n  `Country Group Code` `Country Group` Country…¹ Country M49 C…² ISO2 …³ ISO3 …⁴\n                 <dbl> <chr>               <dbl> <chr>   <chr>   <chr>   <chr>  \n1                 5100 Africa                  4 Algeria 012     DZ      DZA    \n2                 5100 Africa                  7 Angola  024     AO      AGO    \n3                 5100 Africa                 53 Benin   204     BJ      BEN    \n4                 5100 Africa                 20 Botswa… 072     BW      BWA    \n5                 5100 Africa                233 Burkin… 854     BF      BFA    \n6                 5100 Africa                 29 Burundi 108     BI      BDI    \n# … with abbreviated variable names ¹​`Country Code`, ²​`M49 Code`, ³​`ISO2 Code`,\n#   ⁴​`ISO3 Code`\n```\n:::\n\n```{.r .cell-code}\ncattle_df <- read_csv(\"_data/FAOSTAT_cattle_dairy.csv\")\nspec(cattle_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ncols(\n  `Domain Code` = col_character(),\n  Domain = col_character(),\n  `Area Code` = col_double(),\n  Area = col_character(),\n  `Element Code` = col_double(),\n  Element = col_character(),\n  `Item Code` = col_double(),\n  Item = col_character(),\n  `Year Code` = col_double(),\n  Year = col_double(),\n  Unit = col_character(),\n  Value = col_double(),\n  Flag = col_character(),\n  `Flag Description` = col_character()\n)\n```\n:::\n\n```{.r .cell-code}\nhead(cattle_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 14\n  Domai…¹ Domain Area …² Area  Eleme…³ Element Item …⁴ Item  Year …⁵  Year Unit \n  <chr>   <chr>    <dbl> <chr>   <dbl> <chr>     <dbl> <chr>   <dbl> <dbl> <chr>\n1 QL      Lives…       2 Afgh…    5318 Milk A…     882 Milk…    1961  1961 Head \n2 QL      Lives…       2 Afgh…    5420 Yield       882 Milk…    1961  1961 hg/An\n3 QL      Lives…       2 Afgh…    5510 Produc…     882 Milk…    1961  1961 tonn…\n4 QL      Lives…       2 Afgh…    5318 Milk A…     882 Milk…    1962  1962 Head \n5 QL      Lives…       2 Afgh…    5420 Yield       882 Milk…    1962  1962 hg/An\n6 QL      Lives…       2 Afgh…    5510 Produc…     882 Milk…    1962  1962 tonn…\n# … with 3 more variables: Value <dbl>, Flag <chr>, `Flag Description` <chr>,\n#   and abbreviated variable names ¹​`Domain Code`, ²​`Area Code`,\n#   ³​`Element Code`, ⁴​`Item Code`, ⁵​`Year Code`\n```\n:::\n:::\n\n\n### Briefly describe the data\nI have read in 2 datasets -> FAOSTAT_cattle_dairy.csv and FAOSTAT_country_groups.csv which represent the dairy data for areas accross different countries and the country details respectively.\n\n## Tidy Data (as needed)\n\nAs we can see from the data, the `Area Code` column in the cattle_df contains values from the `Country Code` column in group_df.\nTo make it less confusing, I am renaming the `Area Code` column to `Country Code` in cattle_df.\n\n::: {.cell}\n\n```{.r .cell-code}\ncattle_df <- cattle_df %>%  rename (\"Country Code\" = \"Area Code\")\nhead(cattle_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 14\n  Domai…¹ Domain Count…² Area  Eleme…³ Element Item …⁴ Item  Year …⁵  Year Unit \n  <chr>   <chr>    <dbl> <chr>   <dbl> <chr>     <dbl> <chr>   <dbl> <dbl> <chr>\n1 QL      Lives…       2 Afgh…    5318 Milk A…     882 Milk…    1961  1961 Head \n2 QL      Lives…       2 Afgh…    5420 Yield       882 Milk…    1961  1961 hg/An\n3 QL      Lives…       2 Afgh…    5510 Produc…     882 Milk…    1961  1961 tonn…\n4 QL      Lives…       2 Afgh…    5318 Milk A…     882 Milk…    1962  1962 Head \n5 QL      Lives…       2 Afgh…    5420 Yield       882 Milk…    1962  1962 hg/An\n6 QL      Lives…       2 Afgh…    5510 Produc…     882 Milk…    1962  1962 tonn…\n# … with 3 more variables: Value <dbl>, Flag <chr>, `Flag Description` <chr>,\n#   and abbreviated variable names ¹​`Domain Code`, ²​`Country Code`,\n#   ³​`Element Code`, ⁴​`Item Code`, ⁵​`Year Code`\n```\n:::\n:::\n\n\nAre there any variables that require mutation to be usable in your analysis stream? For example, do you need to calculate new values in order to graph them? Can string values be represented numerically? Do you need to turn any variables into factors and reorder for ease of graphics and visualization?\n\nNo variables require mutation here and the datasets are ready for joining.\n\n## Join Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\njoin_df <- left_join(cattle_df, group_df, by = \"Country Code\" )\nhead(join_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 20\n  Domai…¹ Domain Count…² Area  Eleme…³ Element Item …⁴ Item  Year …⁵  Year Unit \n  <chr>   <chr>    <dbl> <chr>   <dbl> <chr>     <dbl> <chr>   <dbl> <dbl> <chr>\n1 QL      Lives…       2 Afgh…    5318 Milk A…     882 Milk…    1961  1961 Head \n2 QL      Lives…       2 Afgh…    5318 Milk A…     882 Milk…    1961  1961 Head \n3 QL      Lives…       2 Afgh…    5318 Milk A…     882 Milk…    1961  1961 Head \n4 QL      Lives…       2 Afgh…    5318 Milk A…     882 Milk…    1961  1961 Head \n5 QL      Lives…       2 Afgh…    5318 Milk A…     882 Milk…    1961  1961 Head \n6 QL      Lives…       2 Afgh…    5318 Milk A…     882 Milk…    1961  1961 Head \n# … with 9 more variables: Value <dbl>, Flag <chr>, `Flag Description` <chr>,\n#   `Country Group Code` <dbl>, `Country Group` <chr>, Country <chr>,\n#   `M49 Code` <chr>, `ISO2 Code` <chr>, `ISO3 Code` <chr>, and abbreviated\n#   variable names ¹​`Domain Code`, ²​`Country Code`, ³​`Element Code`,\n#   ⁴​`Item Code`, ⁵​`Year Code`\n```\n:::\n\n```{.r .cell-code}\nspec(join_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ncols(\n  `Domain Code` = col_character(),\n  Domain = col_character(),\n  `Area Code` = col_double(),\n  Area = col_character(),\n  `Element Code` = col_double(),\n  Element = col_character(),\n  `Item Code` = col_double(),\n  Item = col_character(),\n  `Year Code` = col_double(),\n  Year = col_double(),\n  Unit = col_character(),\n  Value = col_double(),\n  Flag = col_character(),\n  `Flag Description` = col_character()\n)\n```\n:::\n\n```{.r .cell-code}\nnrow(join_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 257061\n```\n:::\n\n```{.r .cell-code}\nncol(join_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 20\n```\n:::\n\n```{.r .cell-code}\nn_distinct(cattle_df$`Country Code`)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 232\n```\n:::\n\n```{.r .cell-code}\nn_distinct(group_df$`Country Code`)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 277\n```\n:::\n:::\n\n\nAs an analytical example, I will calculate the total value of items per country group per year\n\n\n::: {.cell}\n\n```{.r .cell-code}\noutput_df <- join_df %>% group_by(`Country Group`) %>%\n                    summarise(total_value = sum(Value))\nhead(output_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 2\n  `Country Group`           total_value\n  <chr>                           <dbl>\n1 Africa                     3300602669\n2 Americas                           NA\n3 Annex I countries                  NA\n4 Asia                               NA\n5 Australia and New Zealand  1371659056\n6 Caribbean                          NA\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}