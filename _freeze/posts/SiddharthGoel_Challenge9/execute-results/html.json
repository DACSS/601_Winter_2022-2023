{
  "hash": "de981ac3fd351aeedd5b394388cc8715",
  "result": {
    "markdown": "---\ntitle: \"Challenge 9\"\nauthor: \"Siddharth Goel\"\ndescription: \"Creating a function\"\ndate: \"01/31/2023\"\nformat:\n  html:\n    toc: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_9\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(dplyr)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Challenge Overview\n\nToday's challenge is simple. Create a function, and use it to perform a data analysis / cleaning / visualization task:\n\nExamples of such functions are:\n1) A function that reads in and cleans a dataset.  \n2) A function that computes summary statistics (e.g., computes the z score for a variable).  \n3) A function that plots a histogram.  \n\nThat's it!\n\n# Function to read and clean a dataset\nThis function reads in a csv and removes the N/A columns in the file\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread_and_clean_csv <- function(x) {\n  data <- read_csv(x)\n  data <- data %>% select_if(~ !any(is.na(.)))\n  return(data)\n} \n```\n:::\n\n\nRunning the function on the dataset hotel_bookings.csv\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- read_and_clean_csv(\"_data/hotel_bookings.csv\")\nhead(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 31\n  hotel   is_ca…¹ lead_…² arriv…³ arriv…⁴ arriv…⁵ arriv…⁶ stays…⁷ stays…⁸ adults\n  <chr>     <dbl>   <dbl>   <dbl> <chr>     <dbl>   <dbl>   <dbl>   <dbl>  <dbl>\n1 Resort…       0     342    2015 July         27       1       0       0      2\n2 Resort…       0     737    2015 July         27       1       0       0      2\n3 Resort…       0       7    2015 July         27       1       0       1      1\n4 Resort…       0      13    2015 July         27       1       0       1      1\n5 Resort…       0      14    2015 July         27       1       0       2      2\n6 Resort…       0      14    2015 July         27       1       0       2      2\n# … with 21 more variables: babies <dbl>, meal <chr>, country <chr>,\n#   market_segment <chr>, distribution_channel <chr>, is_repeated_guest <dbl>,\n#   previous_cancellations <dbl>, previous_bookings_not_canceled <dbl>,\n#   reserved_room_type <chr>, assigned_room_type <chr>, booking_changes <dbl>,\n#   deposit_type <chr>, agent <chr>, company <chr>, days_in_waiting_list <dbl>,\n#   customer_type <chr>, adr <dbl>, required_car_parking_spaces <dbl>,\n#   total_of_special_requests <dbl>, reservation_status <chr>, …\n```\n:::\n:::\n\n\n# Function to compute statistics (z-score)\nz-score = (x - mean) / std_dev\n\n\n::: {.cell}\n\n```{.r .cell-code}\nz_score <- function(col) {\n  output <- (col - mean(col)) / sd(col)\n  return(output)\n}\n```\n:::\n\n\n\nEvaluating Z-Score for a column in hotel_bookings.csv\n\n::: {.cell}\n\n```{.r .cell-code}\nz_score_output <- z_score(data$stays_in_week_nights)\nhead(z_score_output)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -1.3102344 -1.3102344 -0.7862039 -0.7862039 -0.2621733 -0.2621733\n```\n:::\n:::\n\n\n\n# Function that plots a histogram\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_histogram <- function(input_path) {\n  tidy_data <- read_csv(input_path)\n  tidy_data <- tidy_data %>% replace_na(list(reviews_per_month = 0))\n  df_agg = tidy_data %>% group_by(neighbourhood_group)  %>%\n                    summarise(total_reviews_per_month = sum(reviews_per_month),\n                              .groups = 'drop')\n  head(df_agg)\n  ggplot(data=df_agg, aes(x=neighbourhood_group, y=total_reviews_per_month)) +\n  geom_bar(stat=\"identity\") + labs(title = \"Total Reviews Per Month\")\n}\n\nplot_histogram(\"_data/AB_NYC_2019.csv\")\n```\n\n::: {.cell-output-display}\n![](SiddharthGoel_Challenge9_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "SiddharthGoel_Challenge9_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}