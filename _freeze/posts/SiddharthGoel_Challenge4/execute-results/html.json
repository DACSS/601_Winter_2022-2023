{
  "hash": "4a0981ad037cbcd5b99bc09583f49224",
  "result": {
    "markdown": "---\ntitle: \"Challenge 4\"\nauthor: \"Siddharth Goel\"\ndescription: \"More data wrangling: mutate\"\ndate: \"01/28/2023\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_4\n  - hotel_bookings.csv\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(dplyr)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Read in data\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata = read_csv(\"_data/hotel_bookings.csv\")\n```\n:::\n\n\n### Briefly describe the data\n\n::: {.cell}\n\n```{.r .cell-code}\n# looking at the schema\nspec(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ncols(\n  hotel = col_character(),\n  is_canceled = col_double(),\n  lead_time = col_double(),\n  arrival_date_year = col_double(),\n  arrival_date_month = col_character(),\n  arrival_date_week_number = col_double(),\n  arrival_date_day_of_month = col_double(),\n  stays_in_weekend_nights = col_double(),\n  stays_in_week_nights = col_double(),\n  adults = col_double(),\n  children = col_double(),\n  babies = col_double(),\n  meal = col_character(),\n  country = col_character(),\n  market_segment = col_character(),\n  distribution_channel = col_character(),\n  is_repeated_guest = col_double(),\n  previous_cancellations = col_double(),\n  previous_bookings_not_canceled = col_double(),\n  reserved_room_type = col_character(),\n  assigned_room_type = col_character(),\n  booking_changes = col_double(),\n  deposit_type = col_character(),\n  agent = col_character(),\n  company = col_character(),\n  days_in_waiting_list = col_double(),\n  customer_type = col_character(),\n  adr = col_double(),\n  required_car_parking_spaces = col_double(),\n  total_of_special_requests = col_double(),\n  reservation_status = col_character(),\n  reservation_status_date = col_date(format = \"\")\n)\n```\n:::\n\n```{.r .cell-code}\n# looking at the data values\nhead(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 32\n  hotel   is_ca…¹ lead_…² arriv…³ arriv…⁴ arriv…⁵ arriv…⁶ stays…⁷ stays…⁸ adults\n  <chr>     <dbl>   <dbl>   <dbl> <chr>     <dbl>   <dbl>   <dbl>   <dbl>  <dbl>\n1 Resort…       0     342    2015 July         27       1       0       0      2\n2 Resort…       0     737    2015 July         27       1       0       0      2\n3 Resort…       0       7    2015 July         27       1       0       1      1\n4 Resort…       0      13    2015 July         27       1       0       1      1\n5 Resort…       0      14    2015 July         27       1       0       2      2\n6 Resort…       0      14    2015 July         27       1       0       2      2\n# … with 22 more variables: children <dbl>, babies <dbl>, meal <chr>,\n#   country <chr>, market_segment <chr>, distribution_channel <chr>,\n#   is_repeated_guest <dbl>, previous_cancellations <dbl>,\n#   previous_bookings_not_canceled <dbl>, reserved_room_type <chr>,\n#   assigned_room_type <chr>, booking_changes <dbl>, deposit_type <chr>,\n#   agent <chr>, company <chr>, days_in_waiting_list <dbl>,\n#   customer_type <chr>, adr <dbl>, required_car_parking_spaces <dbl>, …\n```\n:::\n\n```{.r .cell-code}\nunique(data$hotel)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Resort Hotel\" \"City Hotel\"  \n```\n:::\n\n```{.r .cell-code}\nunique(data$arrival_date_year)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2015 2016 2017\n```\n:::\n:::\n\n\nWe got the descriptors of each column by using the `spec` method and the top 10 rows in the data using the `head` method. As we can see, this is the hotel booking data for 2 hotels over 3 years.\nWe can also see that the dataset has `119390` total rows and `32` columns.\n\n## Tidy Data (as needed)\n\nIs your data already tidy, or is there work to be done? Be sure to anticipate your end result to provide a sanity check, and document your work here.\n\nThe data is not tidy as we can see a lot of `NULL` and `0` values in the data in the output of the `head` command. Now, we will attempt to find the percentage of these values in the data and remove the columns if the percentage is significant \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# get zero percentage in data\nzero_percent <- (colSums(data == 0) / nrow(data)) * 100\n# get null percent in data\nnull_percent <- sapply(data, function(x) sum(str_detect(x, \"NULL\")) / length(x))\n\naggregated_df <- data.frame(null_percent = null_percent, zero_percent = zero_percent)\n\narrange(aggregated_df, desc(null_percent), desc(zero_percent))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                               null_percent zero_percent\ncompany                         0.943068934    0.0000000\nagent                           0.136862384    0.0000000\ncountry                         0.004087445    0.0000000\nbabies                          0.000000000   99.2319290\nprevious_bookings_not_canceled  0.000000000   96.9679203\ndays_in_waiting_list            0.000000000   96.9025882\nis_repeated_guest               0.000000000   96.8087780\nprevious_cancellations          0.000000000   94.5690594\nrequired_car_parking_spaces     0.000000000   93.7884245\nbooking_changes                 0.000000000   84.8597035\nis_canceled                     0.000000000   62.9583717\ntotal_of_special_requests       0.000000000   58.8977301\nstays_in_weekend_nights         0.000000000   43.5530614\nstays_in_week_nights            0.000000000    6.4033839\nlead_time                       0.000000000    5.3145155\nadr                             0.000000000    1.6408409\nadults                          0.000000000    0.3375492\nhotel                           0.000000000    0.0000000\narrival_date_year               0.000000000    0.0000000\narrival_date_month              0.000000000    0.0000000\narrival_date_week_number        0.000000000    0.0000000\narrival_date_day_of_month       0.000000000    0.0000000\nmeal                            0.000000000    0.0000000\nmarket_segment                  0.000000000    0.0000000\ndistribution_channel            0.000000000    0.0000000\nreserved_room_type              0.000000000    0.0000000\nassigned_room_type              0.000000000    0.0000000\ndeposit_type                    0.000000000    0.0000000\ncustomer_type                   0.000000000    0.0000000\nreservation_status              0.000000000    0.0000000\nreservation_status_date         0.000000000    0.0000000\nchildren                                 NA           NA\n```\n:::\n:::\n\n\n\nAs we can see from the stats above, it is safe to remove columns `company` and `babies` due to the high percentage of insignificant `\"NULL\"` and `0` values. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nfiltered_data = select(data, -company, -babies)\nhead(filtered_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 30\n  hotel   is_ca…¹ lead_…² arriv…³ arriv…⁴ arriv…⁵ arriv…⁶ stays…⁷ stays…⁸ adults\n  <chr>     <dbl>   <dbl>   <dbl> <chr>     <dbl>   <dbl>   <dbl>   <dbl>  <dbl>\n1 Resort…       0     342    2015 July         27       1       0       0      2\n2 Resort…       0     737    2015 July         27       1       0       0      2\n3 Resort…       0       7    2015 July         27       1       0       1      1\n4 Resort…       0      13    2015 July         27       1       0       1      1\n5 Resort…       0      14    2015 July         27       1       0       2      2\n6 Resort…       0      14    2015 July         27       1       0       2      2\n# … with 20 more variables: children <dbl>, meal <chr>, country <chr>,\n#   market_segment <chr>, distribution_channel <chr>, is_repeated_guest <dbl>,\n#   previous_cancellations <dbl>, previous_bookings_not_canceled <dbl>,\n#   reserved_room_type <chr>, assigned_room_type <chr>, booking_changes <dbl>,\n#   deposit_type <chr>, agent <chr>, days_in_waiting_list <dbl>,\n#   customer_type <chr>, adr <dbl>, required_car_parking_spaces <dbl>,\n#   total_of_special_requests <dbl>, reservation_status <chr>, …\n```\n:::\n:::\n\n## Identify variables that need to be mutated\n\nAre there any variables that require mutation to be usable in your analysis stream? For example, are all time variables correctly coded as dates? Are all string variables reduced and cleaned to sensible categories? Do you need to turn any variables into factors and reorder for ease of graphics and visualization?\n\nEven after we removed columns from the data, there still remain some columns which have NULL and 0 values which can be hard to intercept. NULL values in the `agent` column and binary values in the `is_canceled` and `is_repeated_guest` columns can be confusing to interpret\n\nMutations:\n- NULL values in `agent` to `NO AGENT`\n- 0 values in `is_canceled` to `NO`\n- 1 values in `is_canceled` to `YES`\n- 0 values in `is_repeated_guest` to `NO`\n- 1 values in `is_repeated_guest` to `YES`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmutated_data <- filtered_data %>% mutate(agent = str_replace(agent, \"NULL\", \"NO AGENT\"))\nmutated_data$is_canceled <- as.character(mutated_data$is_canceled)\nmutated_data <- mutated_data %>% mutate(is_canceled = str_replace(is_canceled, \"0\", \"NO\"))\nmutated_data <- mutated_data %>% mutate(is_canceled = str_replace(is_canceled, \"1\", \"YES\"))\nmutated_data <- mutated_data %>% mutate(is_repeated_guest = str_replace(is_repeated_guest, \"0\", \"NO\"))\nmutated_data <- mutated_data %>% mutate(is_repeated_guest = str_replace(is_repeated_guest, \"1\", \"YES\"))\n\nunique(mutated_data$is_canceled)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"NO\"  \"YES\"\n```\n:::\n\n```{.r .cell-code}\nunique(mutated_data$is_repeated_guest)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"NO\"  \"YES\"\n```\n:::\n\n```{.r .cell-code}\nyes_percent <- sapply(mutated_data, function(x) sum(str_detect(x, \"YES\")) / length(x))\naggregated_df_mutated <- data.frame(yes_percent = yes_percent)\narrange(aggregated_df_mutated, desc(yes_percent))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                               yes_percent\nis_canceled                     0.37041628\nis_repeated_guest               0.03191222\nhotel                           0.00000000\nlead_time                       0.00000000\narrival_date_year               0.00000000\narrival_date_month              0.00000000\narrival_date_week_number        0.00000000\narrival_date_day_of_month       0.00000000\nstays_in_weekend_nights         0.00000000\nstays_in_week_nights            0.00000000\nadults                          0.00000000\nmeal                            0.00000000\ncountry                         0.00000000\nmarket_segment                  0.00000000\ndistribution_channel            0.00000000\nprevious_cancellations          0.00000000\nprevious_bookings_not_canceled  0.00000000\nreserved_room_type              0.00000000\nassigned_room_type              0.00000000\nbooking_changes                 0.00000000\ndeposit_type                    0.00000000\nagent                           0.00000000\ndays_in_waiting_list            0.00000000\ncustomer_type                   0.00000000\nadr                             0.00000000\nrequired_car_parking_spaces     0.00000000\ntotal_of_special_requests       0.00000000\nreservation_status              0.00000000\nreservation_status_date         0.00000000\nchildren                                NA\n```\n:::\n:::\n\n\nAs we can see above, the final dataframe `mutated_data` contains data in a very clean and understandable format as compared to the original data. Moreover, as a sanity check, it has been verified that the percentages of `YES` and `NO` in the final dataframe match the percentages of `0` and `1` in the original dataframe for columns `is_canceled` and `is_repeated_guest` \n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}