{
  "hash": "4db5cc85f514cd8f23587a1c4f69653f",
  "result": {
    "markdown": "---\ntitle: \"Challenge 5: Introduction to Visualization\"\nauthor: \"Surya Praneeth Reddy Chirasani\"\ndescription: \"\"\ndate: \"01/15/2023\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_5\n  - cereal\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(readr)\nknitr::opts_chunk$set(echo = TRUE)\n```\n:::\n\n\n## Data Description\nThe dataset includes sodium and sugar content for 20 cereals which are categorized into two types A or C. There isn't any information regarding what the types mean\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncereal_data <-read_csv(\"_data/cereal.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 20 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): Cereal, Type\ndbl (2): Sodium, Sugar\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\ncereal_data\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 20 × 4\n   Cereal                Sodium Sugar Type \n   <chr>                  <dbl> <dbl> <chr>\n 1 Frosted Mini Wheats        0    11 A    \n 2 Raisin Bran              340    18 A    \n 3 All Bran                  70     5 A    \n 4 Apple Jacks              140    14 C    \n 5 Captain Crunch           200    12 C    \n 6 Cheerios                 180     1 C    \n 7 Cinnamon Toast Crunch    210    10 C    \n 8 Crackling Oat Bran       150    16 A    \n 9 Fiber One                100     0 A    \n10 Frosted Flakes           130    12 C    \n11 Froot Loops              140    14 C    \n12 Honey Bunches of Oats    180     7 A    \n13 Honey Nut Cheerios       190     9 C    \n14 Life                     160     6 C    \n15 Rice Krispies            290     3 C    \n16 Honey Smacks              50    15 A    \n17 Special K                220     4 A    \n18 Wheaties                 180     4 A    \n19 Corn Flakes              200     3 A    \n20 Honeycomb                210    11 C    \n```\n:::\n:::\n\n## Tidying Data\nLooking at the entire data I don't see the need for tidying data\n\n## Univariate Visualization\n\nI want to plot a histogram to see in what ranges or distribution sodium and sugar contents lie\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(cereal_data, aes(x=Sodium)) +\n  geom_histogram(bins=10) \n```\n\n::: {.cell-output-display}\n![](SuryaPraneethReddyChirasani_challenge5_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(cereal_data, aes(x=Sugar)) +\n  geom_histogram(bins=10) \n```\n\n::: {.cell-output-display}\n![](SuryaPraneethReddyChirasani_challenge5_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nIn the histogram for Sodium there is missing data in some bins, which could mean there are outliers. We can identify them by plotting a box plot. So for this reason now I am plotting a box plot\n\n\n::: {.cell}\n\n```{.r .cell-code}\nis_outlier <- function(x) {\n  return(x < quantile(x, 0.25) - 1.5 * IQR(x) | x > quantile(x, 0.75) + 1.5 * IQR(x))\n}\n\ncereal_data %>% \n  mutate(outlier = ifelse(is_outlier(Sodium), Cereal, as.numeric(NA))) %>% \n  mutate(Cereal= 'Cereal') %>%\n  ggplot(., mapping=aes(x=Cereal, y=Sodium))+geom_boxplot()+ geom_text(aes(label = outlier), na.rm = TRUE, hjust = -0.3)\n```\n\n::: {.cell-output-display}\n![](SuryaPraneethReddyChirasani_challenge5_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\nIndeed there are outliers in the boxplot!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nis_outlier <- function(x) {\n  return(x < quantile(x, 0.25) - 1.5 * IQR(x) | x > quantile(x, 0.75) + 1.5 * IQR(x))\n}\n\ncereal_data %>% \n  mutate(outlier = ifelse(is_outlier(Sugar), Cereal, as.numeric(NA))) %>% \n  mutate(Cereal= 'Cereal') %>%\n  ggplot(., mapping=aes(x=Cereal, y=Sugar))+geom_boxplot()+ geom_text(aes(label = outlier), na.rm = TRUE, hjust = -0.3)\n```\n\n::: {.cell-output-display}\n![](SuryaPraneethReddyChirasani_challenge5_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\nThe histogram for sugar didn't have any empty bins and so as observed in the boxplot there are no outliers\n\n## Bivariate Visualizations\n\nIn order to observe the relationship between Sodium and Sugar, I want to plot a scatter plot with Sodium on y-axis and Sugar in x-axis and see if there are some cereals which has high sugar and low in sodium and viceversa\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(cereal_data, aes(Sugar , Sodium)) + geom_point()\n```\n\n::: {.cell-output-display}\n![](SuryaPraneethReddyChirasani_challenge5_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nLooking at the scatterplot, there are all kinds of cereals with no particular relationship. Maybe there could be a relationship when we highlight cereals based on their type \n\n\n::: {.cell}\n\n```{.r .cell-code}\nis_outlier <- function(x) {\n  return(x < quantile(x, 0.25) - 1.5 * IQR(x) | x > quantile(x, 0.75) + 1.5 * IQR(x))\n}\n\ncereal_data %>% \n  mutate(outlier = ifelse(is_outlier(Sugar) | is_outlier(Sodium), Cereal, as.numeric(NA))) %>% \n  ggplot(., aes(x = Sugar, y = Sodium, color=Type)) + theme(plot.title = element_text(hjust = 0.5)) +\n  geom_point() + \n  scale_colour_manual(values = c(\"blue\", \"red\")) +\n  geom_text(aes(label = outlier), color=\"black\", na.rm = TRUE, hjust=1.1, vjust=1.1, size = 2) +\n  labs(title = \"Scatter Plot\", x = \"Sugar\", y = \"Sodium\")\n```\n\n::: {.cell-output-display}\n![](SuryaPraneethReddyChirasani_challenge5_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\nThere is no particular relationship between cereals of each type as there are spread out in the graph. But plotting the scatter plot helped in visualizing the data more clearly\n\n",
    "supporting": [
      "SuryaPraneethReddyChirasani_challenge5_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}