{
  "hash": "bf296d72fe9c57fd8b2b3f1248a14d3c",
  "result": {
    "markdown": "---\ntitle: \"Challenge 9 Submission\"\nauthor: \"Sean Conway\"\ndescription: \"Creating a function\"\ndate: \"1/31/2023\"\nformat:\n  html:\n    toc: true\n    code-copy: true\n    code-tools: true\n    df-print: paged\ncategories:\n  - challenge_9\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ggplot2)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Challenge Overview\n\nToday's challenge is simple. Create a function, and use it to perform a data analysis / cleaning / visualization task:\n\nExamples of such functions are:\n1) A function that reads in and cleans a dataset.  \n2) A function that computes summary statistics (e.g., computes the z score for a variable).  \n3) A function that plots a histogram.  \n\nThat's it!\n\n## Reusable Functions!\n\nMy goal here to create generic function templates that work with majority of the datasets. These functions can then be reused and modified based on specific requirements of the dataset. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# A function that reads in and cleans a dataset\nread_and_clean_data <- function(file) {\n  data <- read.csv(file)\n  \n  # Remove missing values\n  data <- na.omit(data)\n  return(data)\n}\n\n# A function that computes summary statistics\ncompute_summary_stats <- function(data, variable) {\n  \n  # Get statistics for only numeric types\n  numeric_data <- select_if(data, is.numeric)\n  general_stats <- summary(numeric_data)\n  \n  # Compute the mean and standard deviation separately for the Z-Score\n  mean_value <- mean(data[, variable])\n  std_value <- sd(data[, variable])\n  \n  # Compute the z score for the variable\n  z_score <- (data[, variable] - mean_value) / std_value\n  \n  # Return the z score\n  return(list(general_stats, z_score))\n\n}\n\n# A function that plots a histogram\n\nplot_histogram <- function(data, variable) {\n  \n  hist(as.numeric(data[, variable]), main = paste(\"Histogram of\", variable), xlab = variable, col = \"blue\", breaks = \"Sturges\")\n}\n```\n:::\n\n\nNow that we have our templates ready, let's try it on our dataset, the old faithful: `hotel_bookings`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read and clean the data\ndata <- read_and_clean_data(\"_data/hotel_bookings.csv\")\n# As opposed to: data = read_csv(\"_data/hotel_bookings.csv\")\n\n# Compute the z score for a variable\nsummary_stats <- compute_summary_stats(data, \"stays_in_week_nights\")\n\nsummary_stats[1] # General stats\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n  is_canceled       lead_time   arrival_date_year arrival_date_week_number\n Min.   :0.0000   Min.   :  0   Min.   :2015      Min.   : 1.00           \n 1st Qu.:0.0000   1st Qu.: 18   1st Qu.:2016      1st Qu.:16.00           \n Median :0.0000   Median : 69   Median :2016      Median :28.00           \n Mean   :0.3704   Mean   :104   Mean   :2016      Mean   :27.16           \n 3rd Qu.:1.0000   3rd Qu.:160   3rd Qu.:2017      3rd Qu.:38.00           \n Max.   :1.0000   Max.   :737   Max.   :2017      Max.   :53.00           \n arrival_date_day_of_month stays_in_weekend_nights stays_in_week_nights\n Min.   : 1.0              Min.   : 0.0000         Min.   : 0.0        \n 1st Qu.: 8.0              1st Qu.: 0.0000         1st Qu.: 1.0        \n Median :16.0              Median : 1.0000         Median : 2.0        \n Mean   :15.8              Mean   : 0.9276         Mean   : 2.5        \n 3rd Qu.:23.0              3rd Qu.: 2.0000         3rd Qu.: 3.0        \n Max.   :31.0              Max.   :19.0000         Max.   :50.0        \n     adults          children           babies          is_repeated_guest\n Min.   : 0.000   Min.   : 0.0000   Min.   : 0.000000   Min.   :0.00000  \n 1st Qu.: 2.000   1st Qu.: 0.0000   1st Qu.: 0.000000   1st Qu.:0.00000  \n Median : 2.000   Median : 0.0000   Median : 0.000000   Median :0.00000  \n Mean   : 1.856   Mean   : 0.1039   Mean   : 0.007949   Mean   :0.03191  \n 3rd Qu.: 2.000   3rd Qu.: 0.0000   3rd Qu.: 0.000000   3rd Qu.:0.00000  \n Max.   :55.000   Max.   :10.0000   Max.   :10.000000   Max.   :1.00000  \n previous_cancellations previous_bookings_not_canceled booking_changes  \n Min.   : 0.00000       Min.   : 0.0000                Min.   : 0.0000  \n 1st Qu.: 0.00000       1st Qu.: 0.0000                1st Qu.: 0.0000  \n Median : 0.00000       Median : 0.0000                Median : 0.0000  \n Mean   : 0.08712       Mean   : 0.1371                Mean   : 0.2211  \n 3rd Qu.: 0.00000       3rd Qu.: 0.0000                3rd Qu.: 0.0000  \n Max.   :26.00000       Max.   :72.0000                Max.   :21.0000  \n days_in_waiting_list      adr          required_car_parking_spaces\n Min.   :  0.000      Min.   :  -6.38   Min.   :0.00000            \n 1st Qu.:  0.000      1st Qu.:  69.29   1st Qu.:0.00000            \n Median :  0.000      Median :  94.59   Median :0.00000            \n Mean   :  2.321      Mean   : 101.83   Mean   :0.06252            \n 3rd Qu.:  0.000      3rd Qu.: 126.00   3rd Qu.:0.00000            \n Max.   :391.000      Max.   :5400.00   Max.   :8.00000            \n total_of_special_requests\n Min.   :0.0000           \n 1st Qu.:0.0000           \n Median :0.0000           \n Mean   :0.5713           \n 3rd Qu.:1.0000           \n Max.   :5.0000           \n```\n:::\n\n```{.r .cell-code}\nz_scores <- summary_stats[2]\n\n# Plot the histogram of the variable\nplot_histogram(data, \"stays_in_week_nights\")\n```\n\n::: {.cell-output-display}\n![](challenge9_tanmay_agrawal_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "challenge9_tanmay_agrawal_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}