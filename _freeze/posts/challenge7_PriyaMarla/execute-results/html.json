{
  "hash": "a78bb87b03c66bcddb4439b29c4b5ce8",
  "result": {
    "markdown": "---\ntitle: \"Challenge 7\"\nauthor: \"Priya Marla\"\ndescription: \"Visualizing Multiple Dimensions\"\ndate: \"1/24/2023\"\nformat:\n  html:\n    toc: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_7\n  - hotel_bookings\n  - australian_marriage\n  - air_bnb\n  - eggs\n  - abc_poll\n  - faostat\n  - us_hh\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(epiDisplay)\nlibrary(dbplyr)\nlibrary(tidyverse)\nlibrary(here)\nlibrary(lubridate)\nlibrary(summarytools)\nlibrary(ggplot2)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Challenge Overview\n\nToday's challenge is to:\n\n1)  read in a data set, and describe the data set using both words and any supporting information (e.g., tables, etc)\n2)  tidy data (as needed, including sanity checks)\n3)  mutate variables as needed (including sanity checks)\n4)  Recreate at least two graphs from previous exercises, but introduce at least one additional dimension that you omitted before using ggplot functionality (color, shape, line, facet, etc) The goal is not to create unneeded [chart ink (Tufte)](https://www.edwardtufte.com/tufte/), but to concisely capture variation in additional dimensions that were collapsed in your earlier 2 or 3 dimensional graphs.\n   - Explain why you choose the specific graph type\n5) If you haven't tried in previous weeks, work this week to make your graphs \"publication\" ready with titles, captions, and pretty axis labels and other viewer-friendly features\n\n[R Graph Gallery](https://r-graph-gallery.com/) is a good starting point for thinking about what information is conveyed in standard graph types, and includes example R code. And anyone not familiar with Edward Tufte should check out his [fantastic books](https://www.edwardtufte.com/tufte/books_vdqi) and [courses on data visualizaton.](https://www.edwardtufte.com/tufte/courses)\n\n(be sure to only include the category tags for the data you use!)\n\n## Read in data\n\nRead in one (or more) of the following datasets, using the correct R package and command.\n\n  - eggs ⭐\n  - abc_poll ⭐⭐\n  - australian_marriage ⭐⭐\n  - hotel_bookings ⭐⭐⭐\n  - air_bnb  ⭐⭐⭐\n  - us_hh ⭐⭐⭐⭐\n  - faostat ⭐⭐⭐⭐⭐\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndataset <- here(\"posts\",\"_data\",\"hotel_bookings.csv\") %>%\n  read_csv()\n\ndataset\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 119,390 × 32\n   hotel  is_ca…¹ lead_…² arriv…³ arriv…⁴ arriv…⁵ arriv…⁶ stays…⁷ stays…⁸ adults\n   <chr>    <dbl>   <dbl>   <dbl> <chr>     <dbl>   <dbl>   <dbl>   <dbl>  <dbl>\n 1 Resor…       0     342    2015 July         27       1       0       0      2\n 2 Resor…       0     737    2015 July         27       1       0       0      2\n 3 Resor…       0       7    2015 July         27       1       0       1      1\n 4 Resor…       0      13    2015 July         27       1       0       1      1\n 5 Resor…       0      14    2015 July         27       1       0       2      2\n 6 Resor…       0      14    2015 July         27       1       0       2      2\n 7 Resor…       0       0    2015 July         27       1       0       2      2\n 8 Resor…       0       9    2015 July         27       1       0       2      2\n 9 Resor…       1      85    2015 July         27       1       0       3      2\n10 Resor…       1      75    2015 July         27       1       0       3      2\n# … with 119,380 more rows, 22 more variables: children <dbl>, babies <dbl>,\n#   meal <chr>, country <chr>, market_segment <chr>,\n#   distribution_channel <chr>, is_repeated_guest <dbl>,\n#   previous_cancellations <dbl>, previous_bookings_not_canceled <dbl>,\n#   reserved_room_type <chr>, assigned_room_type <chr>, booking_changes <dbl>,\n#   deposit_type <chr>, agent <chr>, company <chr>, days_in_waiting_list <dbl>,\n#   customer_type <chr>, adr <dbl>, required_car_parking_spaces <dbl>, …\n```\n:::\n:::\n\n\n### Briefly describe the data\n\nThis dataset describes the information of the reservations made in Resort Hotel and City Hotel. There are 119390 rows and 32 columns. Each columns represents various data such as for what dates and what hotel the booking was made, whether reservation is called or not and if the payment is made or not etc.\n\n## Tidy Data (as needed)\n\nIs your data already tidy, or is there work to be done? Be sure to anticipate your end result to provide a sanity check, and document your work here.\n\nThe country column is placed in the 14th place, it should be moved up to 2nd place i.e after the hotel column. Created a new column arrival_date by getting the date from \"arrival_date_day_of_month\", \"arrival_date_month\",\"arrival_date_year\" columns. Removing these 3 columns and moving the arrival date column to column after \"lead_time\". \nCreating the new column booking_date to know the date of booking with the information from columns lead_time and arrival_date.\nCreated a new column \"child\" to get the total of children plus babies to replace the columns children and babies.\nModifying the acronyms of the meal column values to full meal names for better understanding.\nAfter tidying up the data, total columns remaining are 28\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndplyr::select(dataset, 3:7 )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 119,390 × 5\n   lead_time arrival_date_year arrival_date_month arrival_date_week_nu…¹ arriv…²\n       <dbl>             <dbl> <chr>                               <dbl>   <dbl>\n 1       342              2015 July                                   27       1\n 2       737              2015 July                                   27       1\n 3         7              2015 July                                   27       1\n 4        13              2015 July                                   27       1\n 5        14              2015 July                                   27       1\n 6        14              2015 July                                   27       1\n 7         0              2015 July                                   27       1\n 8         9              2015 July                                   27       1\n 9        85              2015 July                                   27       1\n10        75              2015 July                                   27       1\n# … with 119,380 more rows, and abbreviated variable names\n#   ¹​arrival_date_week_number, ²​arrival_date_day_of_month\n```\n:::\n\n```{.r .cell-code}\n#tidying the dataset\ntidy_data <- dataset %>%\n  relocate(\"country\",.after = \"hotel\") %>% #relocating the country column\n  mutate(arrival_date = (str_c(\"01\",arrival_date_month,arrival_date_year, sep = \"/\")), arrival_date = dmy(arrival_date), .after = lead_time) %>% #variable for arrival date\n  mutate(booking_date = arrival_date-days(lead_time), .after = lead_time) %>% #variable to know the date of booking\n  mutate(childs = children + babies, .after = adults) %>%\n  mutate(meal=recode(meal,\n                     BB=\"Bed and Breakfast\",\n                     FB=\"Full board\",\n                     HB=\"Half board\",\n                     SC=\"Undefined\")) %>%\n  dplyr::select(-c(\"lead_time\",\"children\",\"babies\")) \ntidy_data <- tidy_data[,-6:-9] #removed columns with arrival date information\ntidy_data\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 119,390 × 28\n   hotel     country is_ca…¹ booking_…² arrival_…³ stays…⁴ stays…⁵ adults childs\n   <chr>     <chr>     <dbl> <date>     <date>       <dbl>   <dbl>  <dbl>  <dbl>\n 1 Resort H… PRT           0 2014-07-24 2015-07-01       0       0      2      0\n 2 Resort H… PRT           0 2013-06-24 2015-07-01       0       0      2      0\n 3 Resort H… GBR           0 2015-06-24 2015-07-01       0       1      1      0\n 4 Resort H… GBR           0 2015-06-18 2015-07-01       0       1      1      0\n 5 Resort H… GBR           0 2015-06-17 2015-07-01       0       2      2      0\n 6 Resort H… GBR           0 2015-06-17 2015-07-01       0       2      2      0\n 7 Resort H… PRT           0 2015-07-01 2015-07-01       0       2      2      0\n 8 Resort H… PRT           0 2015-06-22 2015-07-01       0       2      2      0\n 9 Resort H… PRT           1 2015-04-07 2015-07-01       0       3      2      0\n10 Resort H… PRT           1 2015-04-17 2015-07-01       0       3      2      0\n# … with 119,380 more rows, 19 more variables: meal <chr>,\n#   market_segment <chr>, distribution_channel <chr>, is_repeated_guest <dbl>,\n#   previous_cancellations <dbl>, previous_bookings_not_canceled <dbl>,\n#   reserved_room_type <chr>, assigned_room_type <chr>, booking_changes <dbl>,\n#   deposit_type <chr>, agent <chr>, company <chr>, days_in_waiting_list <dbl>,\n#   customer_type <chr>, adr <dbl>, required_car_parking_spaces <dbl>,\n#   total_of_special_requests <dbl>, reservation_status <chr>, …\n```\n:::\n:::\n\n\nAre there any variables that require mutation to be usable in your analysis stream? For example, do you need to calculate new values in order to graph them? Can string values be represented numerically? Do you need to turn any variables into factors and reorder for ease of graphics and visualization?\n\nDocument your work here.\n\nThree additional data frames have been constructed to get the statistics of number of customer_types, number of meals and number of deposit_types when grouping the data based on the month of arrival and hotel type. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n#counting the various customer types\ncustomers <- tidy_data %>%\n  group_by(hotel, arrival_date, customer_type) %>%\n  count(arrival_date, hotel, customer_type,.drop=F)\ncustomers\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 201 × 4\n# Groups:   hotel, arrival_date, customer_type [201]\n   hotel      arrival_date customer_type       n\n   <chr>      <date>       <chr>           <int>\n 1 City Hotel 2015-07-01   Contract          200\n 2 City Hotel 2015-07-01   Transient         345\n 3 City Hotel 2015-07-01   Transient-Party   853\n 4 City Hotel 2015-08-01   Contract          415\n 5 City Hotel 2015-08-01   Group               8\n 6 City Hotel 2015-08-01   Transient         684\n 7 City Hotel 2015-08-01   Transient-Party  1373\n 8 City Hotel 2015-09-01   Contract          526\n 9 City Hotel 2015-09-01   Group              27\n10 City Hotel 2015-09-01   Transient        1327\n# … with 191 more rows\n```\n:::\n\n```{.r .cell-code}\n#counting various meal types\nmeals <- tidy_data %>%\n  group_by(hotel, arrival_date, meal) %>%\n  count(arrival_date, hotel, meal,.drop=F)\nmeals\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 190 × 4\n# Groups:   hotel, arrival_date, meal [190]\n   hotel      arrival_date meal                  n\n   <chr>      <date>       <chr>             <int>\n 1 City Hotel 2015-07-01   Bed and Breakfast  1071\n 2 City Hotel 2015-07-01   Half board          312\n 3 City Hotel 2015-07-01   Undefined            15\n 4 City Hotel 2015-08-01   Bed and Breakfast  1881\n 5 City Hotel 2015-08-01   Half board          507\n 6 City Hotel 2015-08-01   Undefined            92\n 7 City Hotel 2015-09-01   Bed and Breakfast  2836\n 8 City Hotel 2015-09-01   Full board            1\n 9 City Hotel 2015-09-01   Half board          593\n10 City Hotel 2015-09-01   Undefined            99\n# … with 180 more rows\n```\n:::\n\n```{.r .cell-code}\n#counting various deposit types\ndeposits <- tidy_data %>%\n  group_by(hotel, arrival_date, deposit_type) %>%\n  count(arrival_date, hotel, deposit_type,.drop=F)\ndeposits\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 122 × 4\n# Groups:   hotel, arrival_date, deposit_type [122]\n   hotel      arrival_date deposit_type     n\n   <chr>      <date>       <chr>        <int>\n 1 City Hotel 2015-07-01   No Deposit    1193\n 2 City Hotel 2015-07-01   Non Refund     205\n 3 City Hotel 2015-08-01   No Deposit    1900\n 4 City Hotel 2015-08-01   Non Refund     580\n 5 City Hotel 2015-09-01   No Deposit    2543\n 6 City Hotel 2015-09-01   Non Refund     986\n 7 City Hotel 2015-10-01   No Deposit    2514\n 8 City Hotel 2015-10-01   Non Refund     870\n 9 City Hotel 2015-10-01   Refundable       2\n10 City Hotel 2015-11-01   No Deposit    1147\n# … with 112 more rows\n```\n:::\n:::\n\n\n## Visualization with Multiple Dimensions\n\nThis visualization plots how many different type of customers are booking their stays in the city hotel and resort hotel over the time.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#customer_type plots\nggplot(customers,aes(arrival_date, n, col=customer_type))+\n  geom_line()+\n  facet_wrap(vars(hotel))+\n  scale_x_date()+\n  theme(axis.text.x=element_text(angle=45))\n```\n\n::: {.cell-output-display}\n![](challenge7_PriyaMarla_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\nThis visualization plots how many different type of meals the customers are booking during their stays in the city hotel and resort hotel over the time.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#meals plots\nggplot(meals,aes(arrival_date, n, col=meal))+\n  geom_line()+\n  facet_wrap(vars(hotel))+\n  scale_x_date()+\n  theme(axis.text.x=element_text(angle=45))\n```\n\n::: {.cell-output-display}\n![](challenge7_PriyaMarla_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nThis visualization plots how many different type of customers like to pay for their bookings in the city hotel and resort hotel over the time.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#deposits plots\nggplot(deposits,aes(arrival_date, n, col=deposit_type))+\n  geom_line()+\n  facet_wrap(vars(hotel))+\n  scale_x_date()+\n  theme(axis.text.x=element_text(angle=45))\n```\n\n::: {.cell-output-display}\n![](challenge7_PriyaMarla_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::",
    "supporting": [
      "challenge7_PriyaMarla_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}