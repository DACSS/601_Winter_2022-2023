{
  "hash": "ae9ef9a3a8715c8dfab8715d28aad161",
  "result": {
    "markdown": "---\ntitle: \"Challenge 4\"\nauthor: \"Cristhian Barba Garzon\"\ndescription: \"More data wrangling: mutate\"\ndate: \"01/03/2023\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_4\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Challenge Overview\n\nToday's challenge is to:\n\n1)  read in a data set, and describe the data set using both words and any supporting information (e.g., tables, etc)\n2)  tidy data (as needed, including sanity checks)\n3)  identify variables that need to be mutated\n4)  mutate variables and sanity check all mutations\n\n## Read in data\n\nRead in one (or more) of the following datasets, using the correct R package and command.\n\n-   abc_poll.csv ⭐\n-   poultry_tidy.csv⭐⭐\n-   FedFundsRate.csv⭐⭐⭐\n-   hotel_bookings.csv⭐⭐⭐⭐\n-   debt_in_trillions ⭐⭐⭐⭐⭐\n\nThe data set that was chosen to be read was \"poultry_tidy.csv\".\n\n\n::: {.cell}\n\n```{.r .cell-code}\npoll = read_csv(\"_data/poultry_tidy.csv\")\npoll\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 600 × 4\n   Product  Year Month     Price_Dollar\n   <chr>   <dbl> <chr>            <dbl>\n 1 Whole    2013 January           2.38\n 2 Whole    2013 February          2.38\n 3 Whole    2013 March             2.38\n 4 Whole    2013 April             2.38\n 5 Whole    2013 May               2.38\n 6 Whole    2013 June              2.38\n 7 Whole    2013 July              2.38\n 8 Whole    2013 August            2.38\n 9 Whole    2013 September         2.38\n10 Whole    2013 October           2.38\n# … with 590 more rows\n```\n:::\n\n```{.r .cell-code}\npoll %>%\n  dim() # 600 rows by 4 columns\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 600   4\n```\n:::\n\n```{.r .cell-code}\npoll %>%\n  colnames()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Product\"      \"Year\"         \"Month\"        \"Price_Dollar\"\n```\n:::\n:::\n\n\n### Briefly describe the data\nThe data set \"poultry_tidy.csv\" contains 600 observations and 4 columns. It seems to describe the price of poultry products in each year and month. It can be used to analyze the price increase or decrease for specific products. \n\n## Tidying Data (as needed)\n\nThe data set \"poultry_tidy.csv\" is already tidy. All columns have their own variables stored within them, meaning their column title refers to these observations. I can further tidy this data by changing the arrangement of values; I can arrange the years in ascending order. After viewing the arranged data, we can see that the data is now in ascending order of years, allowing us to view the earliest year.\n\n::: {.cell}\n\n```{.r .cell-code}\narranged = poll %>% \n  arrange(Year) %>% #arranges data set by the year in ascending order\n  select(Product:Price_Dollar) #selects all columns in data set \n\narranged\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 600 × 4\n   Product  Year Month     Price_Dollar\n   <chr>   <dbl> <chr>            <dbl>\n 1 Whole    2004 January           1.98\n 2 Whole    2004 February          1.98\n 3 Whole    2004 March             2.09\n 4 Whole    2004 April             2.12\n 5 Whole    2004 May               2.14\n 6 Whole    2004 June              2.16\n 7 Whole    2004 July              2.17\n 8 Whole    2004 August            2.17\n 9 Whole    2004 September         2.17\n10 Whole    2004 October           2.17\n# … with 590 more rows\n```\n:::\n:::\n\n\n\n## Identifying variables that need to be mutated\n\nIn this data set, the column titled \"Month\" can have its variables changed to numerical values; the months can be mutated to their respective numerical values in order to simplify the data set. Furthermore, we simplify the data set by joining the month and the year into one column. This will leave three columns, with the newly mutated data set having a \"date\" column in the format of mm/yyyy. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmutated = poll %>%\n  mutate(Month = case_when(\n    Month == \"January\" ~ 1,\n    Month == \"February\" ~ 2,\n    Month == \"March\" ~ 3,\n    Month == \"April\" ~ 4,\n    Month == \"May\" ~ 5 ,\n    Month == \"June\" ~ 6,\n    Month == \"July\" ~ 7,\n    Month == \"August\" ~ 8,\n    Month == \"September\" ~ 9,\n    Month == \"October\" ~ 10,\n    Month == \"November\" ~ 11,\n    Month == \"December\" ~ 12\n  ))\n\narranged_mutate = mutated %>%\n  arrange(Year) #arranged by year in ascending order; the values in the \"Month\" column are now numerical \narranged_mutate\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 600 × 4\n   Product  Year Month Price_Dollar\n   <chr>   <dbl> <dbl>        <dbl>\n 1 Whole    2004     1         1.98\n 2 Whole    2004     2         1.98\n 3 Whole    2004     3         2.09\n 4 Whole    2004     4         2.12\n 5 Whole    2004     5         2.14\n 6 Whole    2004     6         2.16\n 7 Whole    2004     7         2.17\n 8 Whole    2004     8         2.17\n 9 Whole    2004     9         2.17\n10 Whole    2004    10         2.17\n# … with 590 more rows\n```\n:::\n\n```{.r .cell-code}\ndates = c() # Create an empty vector to store the dates\n\nfor (i in 1:length(arranged_mutate$Year)) { #for loop -- in range 1 to total length of Year column\n  date_string = sprintf(\"%02d/%04d\", arranged_mutate$Month[i], arranged_mutate$Year[i]) # Format the year and month as a date string\n  dates = c(dates, date_string)  # Append the date string to the dates vector\n}\n\n\nfinal_set = arranged_mutate %>%\n   mutate(Date = dates) %>% #adds new column Date with the vector dates from for-loop\n  subset(select = -c(Year:Month)) %>% #drops Year and Month columns so new date column will replace\n  relocate(Date,.before = 2, .after = NULL) #moves the column to the left hand side before the previous 2nd\nfinal_set\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 600 × 3\n   Product Date    Price_Dollar\n   <chr>   <chr>          <dbl>\n 1 Whole   01/2004         1.98\n 2 Whole   02/2004         1.98\n 3 Whole   03/2004         2.09\n 4 Whole   04/2004         2.12\n 5 Whole   05/2004         2.14\n 6 Whole   06/2004         2.16\n 7 Whole   07/2004         2.17\n 8 Whole   08/2004         2.17\n 9 Whole   09/2004         2.17\n10 Whole   10/2004         2.17\n# … with 590 more rows\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}