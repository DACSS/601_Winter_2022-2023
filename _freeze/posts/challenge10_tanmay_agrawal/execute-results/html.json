{
  "hash": "db3bd2fc3a1ff7843fcaff13bbde4db1",
  "result": {
    "markdown": "---\ntitle: \"Challenge 10 Submission\"\nauthor: \"Tanmay Agrawal\"\ndescription: \"purrr\"\ndate: \"2/1/2023\"\nformat:\n  html:\n    toc: true\n    code-copy: true\n    code-tools: true\n    df-print: paged\ncategories:\n  - challenge_10\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ggplot2)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Challenge Overview\n\nThe [purrr](https://purrr.tidyverse.org/) package is a powerful tool for functional programming. It allows the user to apply a single function across multiple objects. It can replace for loops with a more readable (and often faster) simple function call. \n\nFor example, we can draw `n` random samples from 10 different distributions using a vector of 10 means.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 100 # sample size\nm <- seq(1,10) # means \nsamps <- map(m,rnorm,n=n) \n```\n:::\n\n\nWe can then use `map_dbl` to verify that this worked correctly by computing the mean for each sample.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nsamps %>%\n  map_dbl(mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 1.045109 2.118810 2.943366 3.907274 4.925509 5.753940 6.998604 8.095275\n [9] 8.979529 9.778266\n```\n:::\n:::\n\n\n`purrr` is tricky to learn (but beyond useful once you get a handle on it). Therefore, it's imperative that you complete the `purr` and `map` readings before attempting this challenge.  \n\n## The challenge  \n\nUse `purrr` with a function to perform *some* data science task. What this task is is up to you. It could involve computing summary statistics, reading in multiple datasets, running a random process multiple times, or anything else you might need to do in your work as a data analyst. You might consider using `purrr` with a function you wrote for challenge 9.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read our dataset, cereal\ncereal_data = read_csv(\"_data/cereal.csv\")\n```\n:::\n\n\nWe can use the purrr package in various ways, I will use the `purrr::do()` to calculate the ratio of Sodium and Sugar in cereals marketed to Adults (`Type` : A) and to Children (`Type` : B)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter rows where the Sodium column is greater than 200\ncereal_high_sodium <- cereal_data %>% filter(Sodium > 200)\n\ncereal_high_sodium\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"Cereal\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"Sodium\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Sugar\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Type\"],\"name\":[4],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"Raisin Bran\",\"2\":\"340\",\"3\":\"18\",\"4\":\"A\"},{\"1\":\"Cinnamon Toast Crunch\",\"2\":\"210\",\"3\":\"10\",\"4\":\"C\"},{\"1\":\"Rice Krispies\",\"2\":\"290\",\"3\":\"3\",\"4\":\"C\"},{\"1\":\"Special K\",\"2\":\"220\",\"3\":\"4\",\"4\":\"A\"},{\"1\":\"Honeycomb\",\"2\":\"210\",\"3\":\"11\",\"4\":\"C\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\naggregate_data <- cereal_data %>% group_by(Type) %>% summarise(avg_sodium = mean(Sodium), avg_sugar = mean(Sugar))\n\naggregate_data\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"Type\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"avg_sodium\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"avg_sugar\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"A\",\"2\":\"149\",\"3\":\"8.3\"},{\"1\":\"C\",\"2\":\"185\",\"3\":\"9.2\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\ncalculate_ratio <- function(data) {\n  data %>%\n  filter(Sugar > 0) %>%\n  summarise(ratio = mean(Sodium / Sugar, na.rm = TRUE))\n}\n\n# Use purrr::map_dbl (which has been replaced by purrr::do()) to apply the function to each group of the cereal dataset\nratios <- cereal_data %>%\n  group_by(Type) %>%\n  do(calculate_ratio(.)) %>%\n  ungroup() %>%\n  pull(ratio)\n\nratios\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 26.44202 41.20354\n```\n:::\n\n```{.r .cell-code}\n#cereal_data$ratio <- cereal_data %>% map_dbl(calculate_ratio)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}