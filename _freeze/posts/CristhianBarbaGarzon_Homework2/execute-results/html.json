{
  "hash": "1449af520cb59c9650bce0086e16b258",
  "result": {
    "markdown": "---\ntitle: \"Homework 2\"\nauthor: \"Cristhian Barba Garzon\"\ndesription: \"Reading in and Desribing Data\"\ndate: \"01/03/2023\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - hw2\n  - hotel_bookings.csv\n---\n\n::: {.cell}\n\n```{.r .cell-code}\n#install.packages(\"dyplr\")\nlibrary(tidyverse)\nlibrary(dplyr)\nknitr::opts_chunk$set(echo = TRUE)\n```\n:::\n\n\n## Reading in and Describing Data\n\nReading in this data tells us many things about hotel reservations. It provides about 32 different variables relating to how many people reserve hotels, when they reserve their hotels, when they check-out, if they had previous cancellations and much more information. We can also see, through R functions, that this data was taken from the years 2015, 2016, and 2017. Additionally, the data was recorded from all 12 months in each year. We can see that there are about 119,390 observations, which is a lot of information to use. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata = read_csv(\"_data/hotel_bookings.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 119390 Columns: 32\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (13): hotel, arrival_date_month, meal, country, market_segment, distrib...\ndbl  (18): is_canceled, lead_time, arrival_date_year, arrival_date_week_numb...\ndate  (1): reservation_status_date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\ndata %>%\n  view()\n\ndata %>%\n  dim() # 119390 rows by 32 columns\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 119390     32\n```\n:::\n\n```{.r .cell-code}\ndata %>% \n  colnames() #displays column names\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"hotel\"                          \"is_canceled\"                   \n [3] \"lead_time\"                      \"arrival_date_year\"             \n [5] \"arrival_date_month\"             \"arrival_date_week_number\"      \n [7] \"arrival_date_day_of_month\"      \"stays_in_weekend_nights\"       \n [9] \"stays_in_week_nights\"           \"adults\"                        \n[11] \"children\"                       \"babies\"                        \n[13] \"meal\"                           \"country\"                       \n[15] \"market_segment\"                 \"distribution_channel\"          \n[17] \"is_repeated_guest\"              \"previous_cancellations\"        \n[19] \"previous_bookings_not_canceled\" \"reserved_room_type\"            \n[21] \"assigned_room_type\"             \"booking_changes\"               \n[23] \"deposit_type\"                   \"agent\"                         \n[25] \"company\"                        \"days_in_waiting_list\"          \n[27] \"customer_type\"                  \"adr\"                           \n[29] \"required_car_parking_spaces\"    \"total_of_special_requests\"     \n[31] \"reservation_status\"             \"reservation_status_date\"       \n```\n:::\n\n```{.r .cell-code}\ndata %>%\n  distinct(arrival_date_year) %>% #chooses distinct value of the years (only recorded over 3 years)\n  arrange(desc(arrival_date_year)) #sets most recent year as most recent to view\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 1\n  arrival_date_year\n              <dbl>\n1              2017\n2              2016\n3              2015\n```\n:::\n\n```{.r .cell-code}\ndata %>% \n  distinct(arrival_date_month) #recorded over 12 months in each year\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 × 1\n   arrival_date_month\n   <chr>             \n 1 July              \n 2 August            \n 3 September         \n 4 October           \n 5 November          \n 6 December          \n 7 January           \n 8 February          \n 9 March             \n10 April             \n11 May               \n12 June              \n```\n:::\n\n```{.r .cell-code}\ndata %>% \n  distinct(hotel)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 1\n  hotel       \n  <chr>       \n1 Resort Hotel\n2 City Hotel  \n```\n:::\n:::\n\n\n## Tidying Data\n\nMost, if not all, of this data is already in a tidy format. All variables have their own respective columns and values within them, and all observations have their own rows. The data is very large, but that is because there are many different variables to examine. \nWith this in mind, we can make this data set look more presentable by mutating columns; we can reduce the amount of columns there are by combining values--specifically with the columns that have dates. We can combine the day, month, and year columns to create one singular date, further arranging our data into a better format to view. Using the case_when() function within mutate(), the string values in the month column can be converted to their ordered values; since the values in the day and year columns are already numerical, we do not have to change them. By creating an empty vector and using the sprintf() function, we can use a for loop to iterate through the length of the columns and format the values in dd/mm/yyyy. The formatted values can be appended to the empty vector, which then allows us to add the vector to the data set. After this is done, we can remove the used columns using the subset() and select() functions, and we can move our new column over using the relocate() function. Using the mutate() function again, we can change values in the columns \"is_canceled\" and \"is_repeated_guest\" to be string values for \"yes\" and \"no\"; this can be done to allow the viewer to see what data is being recorded rather than inferring what zeros and ones mean. \nWe can also change the names of some columns, using the rename() function, to appear more viewer-friendly. Using the relocate() function, we can also move columns around to make the data set easier to read and compare column values. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmutated.data = data %>%\n  mutate(arrival_date_month = case_when(\n    arrival_date_month == \"January\" ~ 1,\n    arrival_date_month == \"February\" ~ 2,\n    arrival_date_month == \"March\" ~ 3,\n    arrival_date_month == \"April\" ~ 4,\n    arrival_date_month == \"May\" ~ 5 ,\n    arrival_date_month == \"June\" ~ 6,\n    arrival_date_month == \"July\" ~ 7,\n    arrival_date_month == \"August\" ~ 8,\n    arrival_date_month == \"September\" ~ 9,\n    arrival_date_month == \"October\" ~ 10,\n    arrival_date_month == \"November\" ~ 11,\n    arrival_date_month == \"December\" ~ 12\n  ))\n\nmutated.data %>%\n  arrange(arrival_date_month)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 119,390 × 32\n   hotel  is_ca…¹ lead_…² arriv…³ arriv…⁴ arriv…⁵ arriv…⁶ stays…⁷ stays…⁸ adults\n   <chr>    <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>  <dbl>\n 1 Resor…       0     109    2016       1       1       1       0       1      2\n 2 Resor…       0     109    2016       1       1       1       0       1      2\n 3 Resor…       1       2    2016       1       1       1       0       1      2\n 4 Resor…       0      88    2016       1       1       1       0       2      2\n 5 Resor…       1      20    2016       1       1       1       0       2      2\n 6 Resor…       1      76    2016       1       1       1       1       2      2\n 7 Resor…       0      88    2016       1       1       1       0       2      2\n 8 Resor…       1     113    2016       1       1       2       0       1      2\n 9 Resor…       1     113    2016       1       1       2       0       1      2\n10 Resor…       1     113    2016       1       1       2       0       1      2\n# … with 119,380 more rows, 22 more variables: children <dbl>, babies <dbl>,\n#   meal <chr>, country <chr>, market_segment <chr>,\n#   distribution_channel <chr>, is_repeated_guest <dbl>,\n#   previous_cancellations <dbl>, previous_bookings_not_canceled <dbl>,\n#   reserved_room_type <chr>, assigned_room_type <chr>, booking_changes <dbl>,\n#   deposit_type <chr>, agent <chr>, company <chr>, days_in_waiting_list <dbl>,\n#   customer_type <chr>, adr <dbl>, required_car_parking_spaces <dbl>, …\n```\n:::\n\n```{.r .cell-code}\narrival_date = c() # Create an empty vector to store the dates\n\nfor (i in 1:length(mutated.data$arrival_date_year)) { #for loop -- in range 1 to total length of Year column\n  date_string = sprintf(\"%02d/%02d/%04d\",mutated.data$arrival_date_day_of_month[i], mutated.data$arrival_date_month[i], mutated.data$arrival_date_year[i]) # Format as a string\n  arrival_date = c(arrival_date, date_string)  # Append the date string to the vector\n}\n\nnew = mutated.data %>%\n   mutate(Arrival_date = arrival_date, is_canceled = case_when(\n     is_canceled == 0 ~ \"no\",\n     is_canceled == 1 ~ \"yes\",\n     TRUE ~ \"Not Available\"\n   ), is_repeated_guest = case_when(\n     is_repeated_guest == 0 ~ \"no\",\n     is_repeated_guest == 1 ~ \"yes\",\n     TRUE ~ \"Not Available\"\n   )) %>% #adds new column Date with the vector dates from for-loop\n  subset(select = -c(arrival_date_year,arrival_date_month,arrival_date_day_of_month)) %>% #drops Year and Month columns so new date column will replace\n  relocate(Arrival_date,.before = 2, .after = NULL) %>%\n  relocate(reservation_status_date, .before = 2, .after = NULL) %>% #moves the column to the left hand side \n  relocate(reservation_status, .before = 3, .after = NULL) %>%\n  rename(\"Arrival Week #\"=\"arrival_date_week_number\",\"Weekend Nights\"= \"stays_in_weekend_nights\",\"Week Nights\"= \"stays_in_week_nights\")\n\nnew\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 119,390 × 30\n   hotel      reservat…¹ reser…² Arriv…³ is_ca…⁴ lead_…⁵ Arriv…⁶ Weeke…⁷ Week …⁸\n   <chr>      <date>     <chr>   <chr>   <chr>     <dbl>   <dbl>   <dbl>   <dbl>\n 1 Resort Ho… 2015-07-01 Check-… 01/07/… no          342      27       0       0\n 2 Resort Ho… 2015-07-01 Check-… 01/07/… no          737      27       0       0\n 3 Resort Ho… 2015-07-02 Check-… 01/07/… no            7      27       0       1\n 4 Resort Ho… 2015-07-02 Check-… 01/07/… no           13      27       0       1\n 5 Resort Ho… 2015-07-03 Check-… 01/07/… no           14      27       0       2\n 6 Resort Ho… 2015-07-03 Check-… 01/07/… no           14      27       0       2\n 7 Resort Ho… 2015-07-03 Check-… 01/07/… no            0      27       0       2\n 8 Resort Ho… 2015-07-03 Check-… 01/07/… no            9      27       0       2\n 9 Resort Ho… 2015-05-06 Cancel… 01/07/… yes          85      27       0       3\n10 Resort Ho… 2015-04-22 Cancel… 01/07/… yes          75      27       0       3\n# … with 119,380 more rows, 21 more variables: adults <dbl>, children <dbl>,\n#   babies <dbl>, meal <chr>, country <chr>, market_segment <chr>,\n#   distribution_channel <chr>, is_repeated_guest <chr>,\n#   previous_cancellations <dbl>, previous_bookings_not_canceled <dbl>,\n#   reserved_room_type <chr>, assigned_room_type <chr>, booking_changes <dbl>,\n#   deposit_type <chr>, agent <chr>, company <chr>, days_in_waiting_list <dbl>,\n#   customer_type <chr>, adr <dbl>, required_car_parking_spaces <dbl>, …\n```\n:::\n:::\n\n\n\n## Research Questions for Data\n\nThis data can be useful for many research questions. It can help answer questions that compare the amount of adults and children in reservations, which in turn could indicate if families or couples travel to hotels more often than others. We can also look at the types of hotels and see if people canceled their reservations, and this can lead to some hypotheses regarding people's preferences. Using statistical summary functions can also help answer how many nights people stay during the weekend or week; these functions can also help create visualizations to better see any trends in the data. Two example questions that we can answer are the following:\n\n1) What is the most amount of adults in a reservation?\n- We can answer this question by using R functions to select the specific column that indicates number of adults in a reservation. This column would be the \"adults\" column, and we would use the max() function within the summarize() function to find the maximum amount of adults. \n\n2) Provide a statistical summary of the number of adults, children, and babies.\n- We can use the summary() function to begin summarizing this data. Functions like max(), mean(), median(), and sd() are all examples that we can use to summarize our data--specifically any columns we like. These functions can help us understand the average amount of people in a reservation, the maximum amount, and the deviation of amount of people. This information can tell us about large and small reservations, families and couples, or single people who possibly travel for work. \n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}