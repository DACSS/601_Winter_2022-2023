{
  "hash": "c1da95000bdc0ec78f9fb323d8e6819b",
  "result": {
    "markdown": "---\ntitle: \"Challenge 7\"\nauthor: \"Siddharth Goel\"\ndescription: \"Visualizing Multiple Dimensions\"\ndate: \"01/31/2023\"\nformat:\n  html:\n    toc: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_7\n  - hotel_bookings\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(dplyr)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Challenge Overview\n\nToday's challenge is to:\n\n1)  read in a data set, and describe the data set using both words and any supporting information (e.g., tables, etc)\n2)  tidy data (as needed, including sanity checks)\n3)  mutate variables as needed (including sanity checks)\n4)  Recreate at least two graphs from previous exercises, but introduce at least one additional dimension that you omitted before using ggplot functionality (color, shape, line, facet, etc) The goal is not to create unneeded [chart ink (Tufte)](https://www.edwardtufte.com/tufte/), but to concisely capture variation in additional dimensions that were collapsed in your earlier 2 or 3 dimensional graphs.\n   - Explain why you choose the specific graph type\n5) If you haven't tried in previous weeks, work this week to make your graphs \"publication\" ready with titles, captions, and pretty axis labels and other viewer-friendly features\n\n[R Graph Gallery](https://r-graph-gallery.com/) is a good starting point for thinking about what information is conveyed in standard graph types, and includes example R code. And anyone not familiar with Edward Tufte should check out his [fantastic books](https://www.edwardtufte.com/tufte/books_vdqi) and [courses on data visualizaton.](https://www.edwardtufte.com/tufte/courses)\n\n(be sure to only include the category tags for the data you use!)\n\n## Read in data\n\nI read in the hotel_booking dataset, the same one which I read in challenge 4, just to be able to use the results here.\n\n::: {.cell}\n\n```{.r .cell-code}\ndata = read_csv(\"_data/hotel_bookings.csv\")\nspec(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ncols(\n  hotel = col_character(),\n  is_canceled = col_double(),\n  lead_time = col_double(),\n  arrival_date_year = col_double(),\n  arrival_date_month = col_character(),\n  arrival_date_week_number = col_double(),\n  arrival_date_day_of_month = col_double(),\n  stays_in_weekend_nights = col_double(),\n  stays_in_week_nights = col_double(),\n  adults = col_double(),\n  children = col_double(),\n  babies = col_double(),\n  meal = col_character(),\n  country = col_character(),\n  market_segment = col_character(),\n  distribution_channel = col_character(),\n  is_repeated_guest = col_double(),\n  previous_cancellations = col_double(),\n  previous_bookings_not_canceled = col_double(),\n  reserved_room_type = col_character(),\n  assigned_room_type = col_character(),\n  booking_changes = col_double(),\n  deposit_type = col_character(),\n  agent = col_character(),\n  company = col_character(),\n  days_in_waiting_list = col_double(),\n  customer_type = col_character(),\n  adr = col_double(),\n  required_car_parking_spaces = col_double(),\n  total_of_special_requests = col_double(),\n  reservation_status = col_character(),\n  reservation_status_date = col_date(format = \"\")\n)\n```\n:::\n\n```{.r .cell-code}\nhead(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 32\n  hotel   is_ca…¹ lead_…² arriv…³ arriv…⁴ arriv…⁵ arriv…⁶ stays…⁷ stays…⁸ adults\n  <chr>     <dbl>   <dbl>   <dbl> <chr>     <dbl>   <dbl>   <dbl>   <dbl>  <dbl>\n1 Resort…       0     342    2015 July         27       1       0       0      2\n2 Resort…       0     737    2015 July         27       1       0       0      2\n3 Resort…       0       7    2015 July         27       1       0       1      1\n4 Resort…       0      13    2015 July         27       1       0       1      1\n5 Resort…       0      14    2015 July         27       1       0       2      2\n6 Resort…       0      14    2015 July         27       1       0       2      2\n# … with 22 more variables: children <dbl>, babies <dbl>, meal <chr>,\n#   country <chr>, market_segment <chr>, distribution_channel <chr>,\n#   is_repeated_guest <dbl>, previous_cancellations <dbl>,\n#   previous_bookings_not_canceled <dbl>, reserved_room_type <chr>,\n#   assigned_room_type <chr>, booking_changes <dbl>, deposit_type <chr>,\n#   agent <chr>, company <chr>, days_in_waiting_list <dbl>,\n#   customer_type <chr>, adr <dbl>, required_car_parking_spaces <dbl>, …\n```\n:::\n:::\n\n\n### Briefly describe the data\nAs we can see, this is the hotel booking data for 2 hotels over 3 years.\nWe can also see that the dataset has `119390` total rows and `32` columns.\n\n## Tidy Data (as needed)\n\nI will use the results from challenge 4 in this challenge and remove columns `babies` and `company` as they contain a lot of unwanted NULL/0 values. Moreover, the column `arrival_date_week_number` is also removed as it does not provide any special information.\n\n::: {.cell}\n\n```{.r .cell-code}\nfiltered_data = select(data, -company, -babies, -arrival_date_week_number)\nhead(filtered_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 29\n  hotel   is_ca…¹ lead_…² arriv…³ arriv…⁴ arriv…⁵ stays…⁶ stays…⁷ adults child…⁸\n  <chr>     <dbl>   <dbl>   <dbl> <chr>     <dbl>   <dbl>   <dbl>  <dbl>   <dbl>\n1 Resort…       0     342    2015 July          1       0       0      2       0\n2 Resort…       0     737    2015 July          1       0       0      2       0\n3 Resort…       0       7    2015 July          1       0       1      1       0\n4 Resort…       0      13    2015 July          1       0       1      1       0\n5 Resort…       0      14    2015 July          1       0       2      2       0\n6 Resort…       0      14    2015 July          1       0       2      2       0\n# … with 19 more variables: meal <chr>, country <chr>, market_segment <chr>,\n#   distribution_channel <chr>, is_repeated_guest <dbl>,\n#   previous_cancellations <dbl>, previous_bookings_not_canceled <dbl>,\n#   reserved_room_type <chr>, assigned_room_type <chr>, booking_changes <dbl>,\n#   deposit_type <chr>, agent <chr>, days_in_waiting_list <dbl>,\n#   customer_type <chr>, adr <dbl>, required_car_parking_spaces <dbl>,\n#   total_of_special_requests <dbl>, reservation_status <chr>, …\n```\n:::\n:::\n\n\n\nAre there any variables that require mutation to be usable in your analysis stream? For example, do you need to calculate new values in order to graph them? Can string values be represented numerically? Do you need to turn any variables into factors and reorder for ease of graphics and visualization?\n\nI performed the following mutations on the data following the results of Challenge 4\n\nMutations:\n- NULL values in `agent` to `NO AGENT`\n- 0 values in `is_canceled` to `NO`\n- 1 values in `is_canceled` to `YES`\n- 0 values in `is_repeated_guest` to `NO`\n- 1 values in `is_repeated_guest` to `YES`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmutated_data <- filtered_data %>% mutate(agent = str_replace(agent, \"NULL\", \"NO AGENT\"))\nmutated_data$is_canceled <- as.character(mutated_data$is_canceled)\nmutated_data <- mutated_data %>% mutate(is_canceled = str_replace(is_canceled, \"0\", \"NO\"))\nmutated_data <- mutated_data %>% mutate(is_canceled = str_replace(is_canceled, \"1\", \"YES\"))\nmutated_data <- mutated_data %>% mutate(is_repeated_guest = str_replace(is_repeated_guest, \"0\", \"NO\"))\nmutated_data <- mutated_data %>% mutate(is_repeated_guest = str_replace(is_repeated_guest, \"1\", \"YES\"))\nhead(mutated_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 29\n  hotel   is_ca…¹ lead_…² arriv…³ arriv…⁴ arriv…⁵ stays…⁶ stays…⁷ adults child…⁸\n  <chr>   <chr>     <dbl>   <dbl> <chr>     <dbl>   <dbl>   <dbl>  <dbl>   <dbl>\n1 Resort… NO          342    2015 July          1       0       0      2       0\n2 Resort… NO          737    2015 July          1       0       0      2       0\n3 Resort… NO            7    2015 July          1       0       1      1       0\n4 Resort… NO           13    2015 July          1       0       1      1       0\n5 Resort… NO           14    2015 July          1       0       2      2       0\n6 Resort… NO           14    2015 July          1       0       2      2       0\n# … with 19 more variables: meal <chr>, country <chr>, market_segment <chr>,\n#   distribution_channel <chr>, is_repeated_guest <chr>,\n#   previous_cancellations <dbl>, previous_bookings_not_canceled <dbl>,\n#   reserved_room_type <chr>, assigned_room_type <chr>, booking_changes <dbl>,\n#   deposit_type <chr>, agent <chr>, days_in_waiting_list <dbl>,\n#   customer_type <chr>, adr <dbl>, required_car_parking_spaces <dbl>,\n#   total_of_special_requests <dbl>, reservation_status <chr>, …\n```\n:::\n:::\n\n\n## Visualization with Multiple Dimensions\n\nFirst, I plot the graph of the number of arrivals in each hotel every month\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmonthly_arrivals <- mutated_data %>% group_by(hotel, arrival_date_year, arrival_date_month) %>% count(hotel, arrival_date_year, arrival_date_month)\n\nhead(monthly_arrivals)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 4\n# Groups:   hotel, arrival_date_year, arrival_date_month [6]\n  hotel      arrival_date_year arrival_date_month     n\n  <chr>                  <dbl> <chr>              <int>\n1 City Hotel              2015 August              2480\n2 City Hotel              2015 December            1654\n3 City Hotel              2015 July                1398\n4 City Hotel              2015 November            1235\n5 City Hotel              2015 October             3386\n6 City Hotel              2015 September           3529\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmonthly_arrival_plot <- ggplot(monthly_arrivals, aes(arrival_date_month, n, col=arrival_date_month)) +\ngeom_line()+\nfacet_wrap(vars(hotel))+\nscale_x_discrete(breaks = c('April', 'February', 'June', 'November'))+\nlabs(y= \"Total Arrivals\", x = \"Month\")\n\nmonthly_arrival_plot\n```\n\n::: {.cell-output-display}\n![](SiddharthGoel_Challenge7_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\nNow, we will attempt to achieve the same graph, but for different distribution channels.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndistribution_channel_arrivals <- mutated_data %>% group_by(hotel, arrival_date_year, arrival_date_month, distribution_channel) %>% count(hotel, arrival_date_year, arrival_date_month, distribution_channel)\n\nhead(distribution_channel_arrivals)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 5\n# Groups:   hotel, arrival_date_year, arrival_date_month, distribution_channel\n#   [6]\n  hotel      arrival_date_year arrival_date_month distribution_channel     n\n  <chr>                  <dbl> <chr>              <chr>                <int>\n1 City Hotel              2015 August             Corporate               77\n2 City Hotel              2015 August             Direct                 289\n3 City Hotel              2015 August             TA/TO                 2110\n4 City Hotel              2015 August             Undefined                4\n5 City Hotel              2015 December           Corporate              107\n6 City Hotel              2015 December           Direct                 225\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndc_arrival_plot <- ggplot(distribution_channel_arrivals, aes(arrival_date_month, n, col=distribution_channel)) +\ngeom_line()+\nfacet_wrap(vars(hotel))+\nscale_x_discrete(breaks = c('April', 'February', 'June', 'November'))+\nlabs(y= \"Total Arrivals\", x = \"Month\")\n\ndc_arrival_plot\n```\n\n::: {.cell-output-display}\n![](SiddharthGoel_Challenge7_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\nAs we can see from the graph above, `TA.TO` channel contributes to the most bookings.\n\n",
    "supporting": [
      "SiddharthGoel_Challenge7_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}