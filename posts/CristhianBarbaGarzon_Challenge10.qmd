---
title: "Challenge 10"
author: "Cristhian Barba Garzon"
description: "purrr"
date: "1/25/2023"
format:
  html:
    df-print: paged 
    toc: true
    code-copy: true
    code-tools: true
categories:
  - challenge_10
---

```{r}
#| label: setup
#| warning: false
#| message: false

library(tidyverse)
library(ggplot2)
library(purrr)

knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
```

## Challenge Overview

The [purrr](https://purrr.tidyverse.org/) package is a powerful tool for functional programming. It allows the user to apply a single function across multiple objects. It can replace for loops with a more readable (and often faster) simple function call. 

For example, we can draw `n` random samples from 10 different distributions using a vector of 10 means.  

```{r}
n <- 100 # sample size
m <- seq(1,10) # means 
samps <- map(m,rnorm,n=n) 
```

We can then use `map_dbl` to verify that this worked correctly by computing the mean for each sample.  

```{r}
samps %>%
  map_dbl(mean)
```

`purrr` is tricky to learn (but beyond useful once you get a handle on it). Therefore, it's imperative that you complete the `purr` and `map` readings before attempting this challenge.  

## Reading in a data set 

I read in the hotel bookings csv file. 

```{r}
hotel = read_csv("_data/hotel_bookings.csv")
hotel


```
## Purr

I used the map_dbl function to perform a statistical function on individual columns. I found the median for three columns and took into account the missing values. The printed results are for the adults, children, and babies columns. Additionally, the map2_dbl function was used to take two columns and perform addition on each pairing observation. The result is a vector of the sums of each observation from the two columns labelled adults and children. This can be important because we can understand the total amount of people in each reservation. Lastly, the keep function was used to filter through an individual column for a specific condition; in this case, the condition was that the observations must be greater than 15--meaning we are only recording reservations that have more than 15 adults. 

```{r}
result_Median = hotel %>%
  select(adults, children, babies) %>%
  map_dbl(median, na.rm = TRUE) #using purrr to recreate finding median from earlier challenges 
result_Median


result_Sum =  map2_dbl(hotel$adults, hotel$children, `+`)
heading = head(result_Sum,100)#returns a vector of the sum of the two columns 
heading
result_filter = keep(hotel$adults, function(adults) adults > 15) #keep function filters through the column for specific observations above 15--more than 15 adults in a reservation. 
result_filter

```


