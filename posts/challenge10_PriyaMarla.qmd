---
title: "Challenge 10"
author: "Priya Marla"
description: "purrr"
date: "1/28/2023"
format:
  html:
    toc: true
    code-copy: true
    code-tools: true
categories:
  - challenge_10
---

```{r}
#| label: setup
#| warning: false
#| message: false

library(tidyverse)
library(ggplot2)
library(purrr)
library(readxl)
library(here)
library(dplyr)

knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
```

## Challenge Overview

The [purrr](https://purrr.tidyverse.org/) package is a powerful tool for functional programming. It allows the user to apply a single function across multiple objects. It can replace for loops with a more readable (and often faster) simple function call. 

For example, we can draw `n` random samples from 10 different distributions using a vector of 10 means.  

```{r}
n <- 100 # sample size
m <- seq(1,10) # means 
samps <- map(m,rnorm,n=n) 
```

We can then use `map_dbl` to verify that this worked correctly by computing the mean for each sample.  

```{r}
samps %>%
  map_dbl(mean)
```

`purrr` is tricky to learn (but beyond useful once you get a handle on it). Therefore, it's imperative that you complete the `purr` and `map` readings before attempting this challenge.  

## The challenge  

Use `purrr` with a function to perform *some* data science task. What this task is is up to you. It could involve computing summary statistics, reading in multiple datasets, running a random process multiple times, or anything else you might need to do in your work as a data analyst. You might consider using `purrr` with a function you wrote for challenge 9.  

This dataset describes the income statistics of various races over the years. The data shows what percentage of people fall under each income category i.e ranging from under $15,000 to $200,000 per year. The mean and median of the income is also calculated in the columns 13 and 15. The statistics are calculated all races combine and also separate for different races.

For this analysis considering only "All Race" data. Calling various function to get the analysis
```{r}
#function for reading data
read_data <- function(file_name, file_type, n_max = 1000, skip = 0) {
  if (file_type == "excel"){
    read_excel(here("posts","_data",file_name), skip = skip, n_max = n_max)
  }
  else if (file_type == "csv"){
    read_csv(here("posts","_data",file_name))
  }
}

#function for getting the stats of a particular column using map_dbl
get_stats <- function(db){
  print("Max of each double column")
  print(paste(map_dbl(db[,c(4:15)], max)))
  print("Min of each double column")
  print(paste(map_dbl(db[,c(4:15)], min)))
  print("Mean of each double column")
  print(paste(map_dbl(db[,c(4:15)], mean)))
  print("Median of each double column")
  print(paste(map_dbl(db[,c(4:15)], median)))
  print("Sum of each double column")
  print(paste(map_dbl(db[,c(4:15)], sum)))
}

#function for plotting histogram
get_hist <- function(cols,colname) {
  title <- str_c("Histogram for ",colname)
  hist(cols, col = "purple", main = title, xlab = colname)
}
```

```{r}
#calling the function read_data
db <- read_data("USA Households by Total Money Income, Race, and Hispanic Origin of Householder 1967 to 2019.xlsx","excel", 55, 5)

db #to print the data

#calling the function get_stats
get_stats(db)

#calling the function get_hist
get_hist(db$...15,"Mean Income")
```


