---
title: "Challenge 10"
author: "Sean Conway"
description: "purrr"
date: "02/02/2023"
format:
  html:
    toc: true
    code-copy: true
    code-tools: true
categories:
  - challenge_10
  - hotel_bookings
---

```{r}
#| label: setup
#| warning: false
#| message: false

library(tidyverse)
library(ggplot2)

knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
```

## Challenge Overview

The [purrr](https://purrr.tidyverse.org/) package is a powerful tool for functional programming. It allows the user to apply a single function across multiple objects. It can replace for loops with a more readable (and often faster) simple function call. 

For example, we can draw `n` random samples from 10 different distributions using a vector of 10 means.  

```{r}
n <- 100 # sample size
m <- seq(1,10) # means 
samps <- map(m,rnorm,n=n) 
```

We can then use `map_dbl` to verify that this worked correctly by computing the mean for each sample.  

```{r}
samps %>%
  map_dbl(mean)
```

`purrr` is tricky to learn (but beyond useful once you get a handle on it). Therefore, it's imperative that you complete the `purr` and `map` readings before attempting this challenge.  

## The challenge  

Use `purrr` with a function to perform *some* data science task. What this task is is up to you. It could involve computing summary statistics, reading in multiple datasets, running a random process multiple times, or anything else you might need to do in your work as a data analyst. You might consider using `purrr` with a function you wrote for challenge 9.

I will re-use the dataset I used in Challenge 9 and will compute the Z-Score of the columns, just like I did in Challenge 9.

# Function to compute statistics (z-score)
z-score = (x - mean) / std_dev

```{r}
z_score <- function(col) {
  output <- (col - mean(col)) / sd(col)
  return(output)
}
```

Reading the dataset
```{r}
bookings <- read_csv("_data/hotel_bookings.csv")
# taking 20 samples
bookings <- head(bookings, 20)
```

Calculating the z-score for some of the columns: lead_time, stays_in_week_nights, adr
```{r}
output <- map(
  list(bookings$lead_time,
       bookings$stays_in_week_nights, 
       bookings$adr), 
  z_score)
head(output)

```





